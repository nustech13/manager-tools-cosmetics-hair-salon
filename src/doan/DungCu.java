/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doan;

import java.awt.Color;
import java.awt.Image;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class DungCu extends javax.swing.JPanel {

    /**
     * Creates new form DungCu
     */
    String filename = null;
    byte[] picture = null;
    private String username;
    public DungCu(String username) {
        this.username = username;
        initComponents();
        jComboBox_Loai.setEditable(true);
        loadLoai();
        this.setBackground(Color.PINK);
        Load_DungCu();
        jTextArea_MoTa.setLineWrap(true);
        if(layChucVu(username).equals("Nhân Viên")){
            jButton_Them.setVisible(false);
            jButton_Sua.setVisible(false);
            jButton_XOA.setVisible(false);
            jTextField_Ma.setEditable(false);
            jTextField_DonGia.setEditable(false);
            jTextField_Ten.setEditable(false);
            jTextField_XuatXu.setEditable(false);
            jComboBox_Loai.setEditable(false);
            jTextArea_MoTa.setEditable(false);
            jButton_Hinh.setVisible(false);
        }
    }
    public DungCu() {
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        label1 = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel_DonGia = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField_Ma = new javax.swing.JTextField();
        jTextField_Ten = new javax.swing.JTextField();
        jComboBox_Loai = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea_MoTa = new javax.swing.JTextArea();
        jButton_Hinh = new javax.swing.JButton();
        jLabel_Hinh = new javax.swing.JLabel();
        jButton_Them = new javax.swing.JButton();
        jButton_Sua = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField_DonGia = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField_XuatXu = new javax.swing.JTextField();
        jButton_XOA = new javax.swing.JButton();

        panel1.setBackground(new java.awt.Color(255, 204, 0));
        panel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        label1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        label1.setText("QUẢN LÝ DỤNG CỤ");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTable1.setBackground(new java.awt.Color(204, 204, 204));
        jTable1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ DỤNG CỤ", "TÊN DỤNG CỤ", "LOẠI DỤNG CỤ", "XUẤT XỨ", "ĐƠN GIÁ"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("MÃ DỤNG CỤ:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("TÊN DỤNG CỤ:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("LOẠI DỤNG CỤ:");

        jLabel_DonGia.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel_DonGia.setText("ĐƠN GIÁ:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("HÌNH ẢNH:");

        jTextField_Ma.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextField_Ma.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField_MaKeyTyped(evt);
            }
        });

        jTextField_Ten.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextField_Ten.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField_TenKeyTyped(evt);
            }
        });

        jComboBox_Loai.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jComboBox_Loai.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  }));
        jComboBox_Loai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_LoaiActionPerformed(evt);
            }
        });

        jTextArea_MoTa.setColumns(20);
        jTextArea_MoTa.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea_MoTa.setRows(5);
        jTextArea_MoTa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea_MoTaKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea_MoTa);

        jButton_Hinh.setBackground(new java.awt.Color(0, 102, 255));
        jButton_Hinh.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton_Hinh.setForeground(new java.awt.Color(255, 255, 255));
        jButton_Hinh.setText("CHOOSE");
        jButton_Hinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_HinhActionPerformed(evt);
            }
        });

        jLabel_Hinh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_HinhMouseClicked(evt);
            }
        });

        jButton_Them.setBackground(new java.awt.Color(0, 102, 255));
        jButton_Them.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton_Them.setForeground(new java.awt.Color(255, 255, 255));
        jButton_Them.setText("THÊM");
        jButton_Them.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ThemActionPerformed(evt);
            }
        });

        jButton_Sua.setBackground(new java.awt.Color(0, 102, 255));
        jButton_Sua.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton_Sua.setForeground(new java.awt.Color(255, 255, 255));
        jButton_Sua.setText("SỬA");
        jButton_Sua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SuaActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("MÔ TẢ:");

        jTextField_DonGia.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextField_DonGia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField_DonGiaKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("XUẤT XỨ:");

        jTextField_XuatXu.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextField_XuatXu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField_XuatXuKeyTyped(evt);
            }
        });

        jButton_XOA.setBackground(new java.awt.Color(0, 102, 255));
        jButton_XOA.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton_XOA.setForeground(new java.awt.Color(255, 255, 255));
        jButton_XOA.setText("XOÁ");
        jButton_XOA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_XOAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 841, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(jButton_Hinh)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 247, Short.MAX_VALUE))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                            .addComponent(jTextField_Ten, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)))
                                                    .addComponent(jLabel_Hinh, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(6, 6, 6)
                                                .addComponent(jTextField_Ma, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField_XuatXu, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(35, 35, 35)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel_DonGia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(81, 81, 81)
                                        .addComponent(jButton_Them)
                                        .addGap(217, 217, 217)
                                        .addComponent(jButton_Sua)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton_XOA)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jComboBox_Loai, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                        .addComponent(jTextField_DonGia, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField_Ma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_Loai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_DonGia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField_Ten, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_DonGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField_XuatXu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_Hinh))
                        .addGap(11, 11, 11)
                        .addComponent(jLabel_Hinh, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(108, 108, 108)))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Them)
                    .addComponent(jButton_Sua)
                    .addComponent(jButton_XOA))
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void Load_DungCu(){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setNumRows(0);
        String sql = "select * from DUNGCU";
        Vector<String> vt;
        try{
            try (PreparedStatement ps = ketNoi.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
                while(rs.next()){
                    vt = new Vector<>();
                    vt.add(rs.getString("MADUNGCU").trim());
                    vt.add(rs.getString("TENDUNGCU").trim());
                    vt.add(loadTenLoai(rs.getString("MALOAIDUNGCU").trim()));
                    vt.add(rs.getString("XUATXU").trim());
                    vt.add(String.format("%,d", rs.getInt("DONGIA")));
                    String ma = rs.getString("MADUNGCU").trim();
                    dtm.addRow(vt);
                }
                jTable1.setModel(dtm);
                jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
                    @Override
                    public void valueChanged(ListSelectionEvent e) {
                        if(jTable1.getSelectedRow() >= 0){
                            jTextField_Ma.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 0) + "");
                            jTextField_Ten.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 1) + "");
                            jComboBox_Loai.setSelectedItem(jTable1.getValueAt(jTable1.getSelectedRow(), 2) + "");
                            jTextField_XuatXu.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 3) + "");
                            jTextField_DonGia.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 4) + "");
                            String a = jTextField_DonGia.getText().replaceAll("\\.", "");
                            jTextField_DonGia.setText(a);
                            picture = layHinh(jTextField_Ma.getText());
                            ImageIcon icon = new ImageIcon(new ImageIcon(picture).getImage().getScaledInstance(jLabel_Hinh.getWidth(), jLabel_Hinh.getHeight(), Image.SCALE_SMOOTH));
                            jLabel_Hinh.setIcon(icon);
                            jTextArea_MoTa.setText(layMoTa(jTextField_Ma.getText()));
                        }
                    }
                    
                });
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    private void jButton_ThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ThemActionPerformed
        String maDC = jTextField_Ma.getText();
        String tenDC = jTextField_Ten.getText();
        String donGia = jTextField_DonGia.getText();
        String xuatXu = jTextField_XuatXu.getText();
        String moTa = jTextArea_MoTa.getText();
        String tenLoai = (String) jComboBox_Loai.getSelectedItem();
        int KTMaDC = 0, KTTenDC = 0,KTImage = 0, KTDonGia = 0, KTXuatXu = 0, KTLoai = 0;
        if(maDC.equals("")){
            KTMaDC = 1;
            JOptionPane.showMessageDialog(this, "Mã Dụng Cụ Không Được Trống");
        }
        else if(tenDC.equals("")){
            KTTenDC = 1;
            JOptionPane.showMessageDialog(this, "Tên Dụng Cụ Không Được Trống");
        }
        else if(KTTenDC(tenDC) == 1){
            KTTenDC = 1;
            JOptionPane.showMessageDialog(this, "Tên Dụng Cụ Đã Tồn Tại");
        }
        else if(picture == null){
            KTImage = 1;
            JOptionPane.showMessageDialog(this, "Hình Ảnh Không Được Trống");
        }
        else if(donGia.equals("")){
            KTDonGia = 1;
            JOptionPane.showMessageDialog(this, "Đơn Giá Không Được Trống");
        }
        else if(xuatXu.equals("")){
            KTXuatXu = 1;
            JOptionPane.showMessageDialog(this, "Xuất Xứ Không Được Trống");
        }
        else if(tenLoai.equals("")){
            KTLoai = 1;
            JOptionPane.showMessageDialog(this, "Tên Loại Không Được Trống");
        }
        else if(KTMaDC != 1 && KTTenDC != 1 && KTImage != 1 && KTDonGia != 1 && KTXuatXu != 1 && KTLoai != 1){
            int check = kiemTraDungCu(maDC);
            int check2 = KTTenDC(tenDC);
            if(check == 1){
                JOptionPane.showMessageDialog(this, "Dụng Cụ Đã Tồn Tại");
            }
            else if(check2 == 1){
                JOptionPane.showMessageDialog(this, "Tên Dụng Cụ Đã Tồn Tại");
            }
            else if(check != 1 && check2 != 1){
                if(KTTenLoai(tenLoai) != 1){
                    luuLoaiDC(String.valueOf(demLoai()), tenLoai);
                    jComboBox_Loai.removeAllItems();
                    loadLoai();
                }
                luuDungCu(maDC, tenDC, picture, donGia, xuatXu, moTa, String.valueOf(layMaLoai(tenLoai)));
                luuTinhTrang(maDC, "0", "0", "0");
                JOptionPane.showMessageDialog(this, "Thêm Dụng Cụ Thành Công");
                Load_DungCu();
            }
        }
    }//GEN-LAST:event_jButton_ThemActionPerformed
    private void luuDungCu(String maDC, String tenDC, byte [] hinh, String donGia, String xuatXu, String moTa, String maLoai){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "INSERT INTO DUNGCU VALUES (?, ?, ?, ?, ?, ?, ?)";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ps.setString(1, maDC);
            ps.setString(2, tenDC);
            ps.setBytes(3, hinh);
            ps.setString(4, donGia);
            ps.setString(5, xuatXu);
            ps.setString(6, moTa);
            ps.setString(7, maLoai);
            ps.executeUpdate();
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void luuTinhTrang(String maSP, String SLTot, String SLSD, String SLHong){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "INSERT INTO TINHTRANGDUNGCU VALUES (?, ?, ?, ?)";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ps.setString(1, maSP);
            ps.setString(2, SLTot);
            ps.setString(3, SLSD);
            ps.setString(4, SLHong);
            ps.executeUpdate();
        }
        catch(SQLException ex){
            Logger.getLogger(MyPham.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void luuLoaiDC(String maLoai, String tenLoai){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "INSERT INTO LOAIDUNGCU VALUES (?, ?)";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ps.setString(1, maLoai);
            ps.setString(2, tenLoai);
            ps.executeUpdate();
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void jButton_HinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_HinhActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG and JPG images", "png", "jpg");
        chooser.addChoosableFileFilter(filter);
        int returnValue = chooser.showOpenDialog(this);
        if(returnValue==JFileChooser.APPROVE_OPTION){
            File f = chooser.getSelectedFile();
            filename = f.getAbsolutePath();
            ImageIcon img = new ImageIcon(new ImageIcon(filename).getImage().getScaledInstance(jLabel_Hinh.getWidth(), jLabel_Hinh.getHeight(), Image.SCALE_SMOOTH));
            jLabel_Hinh.setIcon(img);
            try{
                File image = new File(filename);
                FileInputStream fis = new FileInputStream(image);
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                byte[] buf = new byte[1024];
                for(int i; (i = fis.read(buf)) != -1;){
                    bos.write(buf, 0, i);
                }   
                picture = bos.toByteArray();
            }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
        }
    }//GEN-LAST:event_jButton_HinhActionPerformed

    private void jTextField_DonGiaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_DonGiaKeyTyped
        char c = evt.getKeyChar();
        if(!Character.isDigit(c)){
           evt.consume();
        }
        if (jTextField_DonGia.getText().length() >= 8 ){
           evt.consume(); 
        }
    }//GEN-LAST:event_jTextField_DonGiaKeyTyped

    private void jTextField_MaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_MaKeyTyped
        if (jTextField_Ma.getText().length() >= 10 ){
           evt.consume(); 
        }
    }//GEN-LAST:event_jTextField_MaKeyTyped

    private void jTextField_TenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_TenKeyTyped
        if (jTextField_Ten.getText().length() >= 50 ){
           evt.consume(); 
        }
    }//GEN-LAST:event_jTextField_TenKeyTyped

    private void jTextField_XuatXuKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_XuatXuKeyTyped
        if (jTextField_XuatXu.getText().length() >= 50 ){
           evt.consume(); 
        }
    }//GEN-LAST:event_jTextField_XuatXuKeyTyped

    private void jTextArea_MoTaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea_MoTaKeyTyped
        if (jTextArea_MoTa.getText().length() >= 100 ){
           evt.consume(); 
        }
    }//GEN-LAST:event_jTextArea_MoTaKeyTyped

    private void jButton_SuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SuaActionPerformed
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String maDC = jTextField_Ma.getText();
        String tenDC = jTextField_Ten.getText();
        String donGia = jTextField_DonGia.getText();
        String xuatXu = jTextField_XuatXu.getText();
        String moTa = jTextArea_MoTa.getText();
        String tenLoai = (String) jComboBox_Loai.getSelectedItem();
        int kt = kiemTraDungCu(maDC);
        int KTMaDC = 0, KTTenDC = 0,KTImage = 0, KTDonGia = 0, KTXuatXu = 0, KTLoai = 0;
        String sql = "UPDATE DUNGCU SET TENDUNGCU = ?, HINHANH = ?, DONGIA = ?, XUATXU = ?, MOTA = ?, MALOAIDUNGCU = ? WHERE MADUNGCU = ?";
        if(maDC.equals("")){
            KTMaDC = 1;
            JOptionPane.showMessageDialog(this, "Mã Dụng Cụ Không Được Trống");
        }
        else if(kt != 1){
            JOptionPane.showMessageDialog(this, "Dụng Cụ Không Tồn Tại");
            KTMaDC = 1;
        }
        else if(KTTenDC(tenDC) == 1 && !layTenDC(maDC).equals(tenDC)){
            KTTenDC = 1;
            JOptionPane.showMessageDialog(this, "Tên Dụng Cụ Đã Tồn Tại");
        }
        else if(picture == null){
            KTImage = 1;
            JOptionPane.showMessageDialog(this, "Hình Ảnh Không Được Trống");
        }
        else if(donGia.equals("")){
            KTDonGia = 1;
            JOptionPane.showMessageDialog(this, "Đơn Giá Không Được Trống");
        }
        else if(xuatXu.equals("")){
            KTXuatXu = 1;
            JOptionPane.showMessageDialog(this, "Xuất Xứ Không Được Trống");
        }
        else if(tenLoai.equals("")){
            KTLoai = 1;
            JOptionPane.showMessageDialog(this, "Tên Loại Không Được Trống");
        }
        else if(KTMaDC != 1 && KTTenDC != 1 && KTImage != 1 && KTDonGia != 1 && KTXuatXu != 1 && KTLoai != 1){
            
            if(kt == 1){
                if(KTTenLoai(tenLoai) != 1){
                    luuLoaiDC(String.valueOf(demLoai()), tenLoai);
                    jComboBox_Loai.removeAllItems();
                    loadLoai();
                }
                try{
                    PreparedStatement ps = ketNoi.prepareStatement(sql);
                    ps.setString(1, tenDC);
                    ps.setBytes(2, picture);
                    ps.setString(3, donGia);
                    ps.setString(4, xuatXu);
                    ps.setString(5, moTa);
                    ps.setString(6, String.valueOf(layMaLoai(tenLoai)));
                    ps.setString(7, maDC);
                    ps.executeUpdate();
                }
                catch(SQLException ex){
                    Logger.getLogger(TaiKhoan.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(this, "Sửa Thông Tin Thành Công");
                Load_DungCu();
            }
            else{
                JOptionPane.showMessageDialog(this, "Dụng Cụ Không Tồn Tại");
            }
            
        }       
        
        
                
        
    }//GEN-LAST:event_jButton_SuaActionPerformed

    private void jButton_XOAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_XOAActionPerformed
       String maDC = jTextField_Ma.getText();
        int KTMaDC = 0;
        if(maDC.equals("")){
            KTMaDC = 1;
            JOptionPane.showMessageDialog(this, "Không được để trống mã mỹ phẩm");
        }else if(KTMaDC != 1){
            int check1 = kiemTraDungCu(maDC);
            int check2 = laySLDC(maDC) + laySLDCSD(maDC);
            if(check1 == 1 && check2 == 0 ){
                int ret = JOptionPane.showConfirmDialog(this, "Bạn chắc chắn muốn xóa", "Xác Nhận", 0);
                if(ret == JOptionPane.NO_OPTION){
                    JOptionPane.showMessageDialog(this, "Xóa mỹ phẩm không thành công");
                }
                else if(ret == JOptionPane.OK_OPTION){
                    xoaDungCu(maDC);
                    JOptionPane.showMessageDialog(this, "Xóa mỹ phẩm thành công");
                    this.Load_DungCu();
                }
            }
            else if(check1 == 1 && check2 > 0 ){
                JOptionPane.showMessageDialog(this, "Dụng Cụ Đang Được Sử Dụng");
            }
            else{
                JOptionPane.showMessageDialog(this, "Mỹ phẩm không tồn tại");
            }
                
        }
    }//GEN-LAST:event_jButton_XOAActionPerformed
    private int laySLDC(String maDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        int SL = 0;
        String sql = "select SLDCT from TINHTRANGDUNGCU where MADUNGCU = '" + maDC + "'";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                SL = rs.getInt("SLDCT");
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(NhapMyPham.class.getName()).log(Level.SEVERE, null, ex);
        }
        return SL;
    }
    private int laySLDCSD(String maDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        int SL = 0;
        String sql = "select SLDCSD from TINHTRANGDUNGCU where MADUNGCU = '" + maDC + "'";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                SL = rs.getInt("SLDCSD");
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(NhapMyPham.class.getName()).log(Level.SEVERE, null, ex);
        }
        return SL;
    }
    private void jComboBox_LoaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_LoaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_LoaiActionPerformed

    private void jLabel_HinhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_HinhMouseClicked
        
    }//GEN-LAST:event_jLabel_HinhMouseClicked
    private String loadTenLoai(String maLoai){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String ten = "";
        String sql = "select TENLOAIDUNGCU from LOAIDUNGCU Where MALOAIDUNGCU = '" + maLoai + "'";
        
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                ten = rs.getString("TENLOAIDUNGCU").trim();
            }
            ketNoi.close();
            
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ten;
    }
    private void loadLoai(){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "select * from LOAIDUNGCU";
        jComboBox_Loai.addItem("");
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                jComboBox_Loai.addItem(rs.getString("TENLOAIDUNGCU").trim());
            }
            ketNoi.close();
            
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    private int demLoai(){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "select * from LOAIDUNGCU";
        int dem = 1;
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                dem++;
            }
            ketNoi.close();
            
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dem;
    }
    private int KTTenLoai(String tenLoai){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "select * from LOAIDUNGCU";
        int kt = 0;
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                if(rs.getString("TENLOAIDUNGCU").equals(tenLoai)){
                    kt = 1;
                }
            }
            ketNoi.close();
            
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return kt;
    }
    private int KTTenDC(String tenDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "select * from DUNGCU";
        int kt = 0;
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                if(rs.getString("TENDUNGCU").equals(tenDC)){
                    kt = 1;
                }
            }
            ketNoi.close();
            
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return kt;
    }
    private int layMaLoai(String tenLoai){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "select * from LOAIDUNGCU";
        int kt = 0;
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                if(rs.getString("TENLOAIDUNGCU").equals(tenLoai)){
                    kt = rs.getInt("MALOAIDUNGCU");
                }
            }
            ketNoi.close();
            
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return kt;
    }
    private byte [] layHinh(String maDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        byte[] hinh = null;
        String sql = "select HINHANH from DUNGCU where MADUNGCU = '" + maDC + "'";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                hinh = rs.getBytes("HINHANH");
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return hinh;
    }
    
    private int kiemTraDungCu(String maDC){
        int tontai = 0;
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "select * from DUNGCU where MADUNGCU = '" + maDC + "'";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                tontai = 1;
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tontai;
    }
    private String layMoTa(String maDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String moTa = "";
        String sql = "select MOTA from DUNGCU where MADUNGCU = '" + maDC + "'";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                moTa = rs.getString("MOTA");
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return moTa;
    }
    private int kiemTraDCConHang(String maDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        int tontai = 0;
        String sql = "select * from NHAPDUNGCU where MADUNGCU = '" + maDC + "'";
        try{
            try (PreparedStatement ps = ketNoi.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
                while(rs.next()){
                    tontai = 1;
                }
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(DangKy.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tontai;
    }
    
    private void xoaDungCu(String maDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "delete from DUNGCU where MADUNGCU = ?";
        try{
            try (PreparedStatement ps = ketNoi.prepareStatement(sql)) {
                ps.setString(1, maDC);
                ps.executeUpdate();
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private String layChucVu(String username){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "select CHUCVU from NHANVIEN WHERE TAIKHOAN = '" + username + "'";
        String kt = "";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                kt = rs.getString("CHUCVU").trim();
            }
            ketNoi.close();
            
        }
        catch(SQLException ex){
            Logger.getLogger(ThongTinNhanVien.class.getName()).log(Level.SEVERE, null, ex);
        }
        return kt;
    }
    private String layTenDC (String maDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String ten = "";
        String sql = "select TENDUNGCU from DUNGCU where MADUNGCU = '" + maDC + "'";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                ten = rs.getString("TENDUNGCU");
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ten;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Hinh;
    private javax.swing.JButton jButton_Sua;
    private javax.swing.JButton jButton_Them;
    private javax.swing.JButton jButton_XOA;
    private javax.swing.JComboBox<String> jComboBox_Loai;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel_DonGia;
    private javax.swing.JLabel jLabel_Hinh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea_MoTa;
    private javax.swing.JTextField jTextField_DonGia;
    private javax.swing.JTextField jTextField_Ma;
    private javax.swing.JTextField jTextField_Ten;
    private javax.swing.JTextField jTextField_XuatXu;
    private java.awt.Label label1;
    private java.awt.Panel panel1;
    // End of variables declaration//GEN-END:variables
}
