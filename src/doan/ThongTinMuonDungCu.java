/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doan;

import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class ThongTinMuonDungCu extends javax.swing.JPanel {

    /**
     * Creates new form ThongTinMuonDungCu
     */
    String ma = "", maPM = "";
    int SLMuon = 0;
    private String username;
    public ThongTinMuonDungCu(String username) {
        this.username = username;
        initComponents();
        this.setBackground(Color.PINK);
        Load_DungCu();
    }
    public ThongTinMuonDungCu() {
        initComponents();
        Load_DungCu();
    }
    private void Load_DungCu(){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        DefaultTableModel dtm = (DefaultTableModel) jTable_Muon.getModel();
        dtm.setNumRows(0);
        String sql = "select * from PHIEUMUON";
        Vector<String> vt;
        try{
            try (PreparedStatement ps = ketNoi.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
                String user = username;
                while(rs.next()){
                    if(user.equals(rs.getString("TAIKHOAN").trim())){
                        vt = new Vector<>();
                        vt.add(rs.getString("MAPHIEUMUON").trim());
                        vt.add(rs.getString("MADUNGCU").trim());
                        vt.add(layTenDC(rs.getString("MADUNGCU").trim()));
                        vt.add(rs.getString("NGAYMUON").trim());
                        vt.add(rs.getString("SLMUON").trim());
                        dtm.addRow(vt);
                    }
                    
                }
                jTable_Muon.setModel(dtm);
                jTable_Muon.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
                    @Override
                    public void valueChanged(ListSelectionEvent e) {
                        if(jTable_Muon.getSelectedRow() >= 0){
                            ma = jTable_Muon.getValueAt(jTable_Muon.getSelectedRow(), 1) + "";
                            maPM = jTable_Muon.getValueAt(jTable_Muon.getSelectedRow(), 0) + "";
                            String SL = jTable_Muon.getValueAt(jTable_Muon.getSelectedRow(), 4) + "";
                            SLMuon = Integer.valueOf(SL);
                        }
                    }
                    
                });
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(DungCu.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    private String layTenDC (String maDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String ten = "";
        String sql = "select TENDUNGCU from DUNGCU where MADUNGCU = '" + maDC + "'";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                ten = rs.getString("TENDUNGCU");
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(ThongTinMuonDungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ten;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_Tra = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Muon = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField_SLT = new javax.swing.JTextField();
        jTextField_SLHONG = new javax.swing.JTextField();

        jButton_Tra.setBackground(new java.awt.Color(51, 153, 255));
        jButton_Tra.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton_Tra.setText("Trả/Báo Hỏng");
        jButton_Tra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_TraActionPerformed(evt);
            }
        });

        jTable_Muon.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jTable_Muon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Phiếu Mượn", "Mã Dụng Cụ", "Tên Dụng Cụ", "Ngày Mượn", "Số Lượng Mượn"
            }
        ));
        jScrollPane1.setViewportView(jTable_Muon);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel1.setText("Số Lượng Trả:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel2.setText("Số Lượng Hỏng:");

        jTextField_SLT.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jTextField_SLHONG.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(jButton_Tra)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField_SLT, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_SLHONG, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jTextField_SLT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_SLHONG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addComponent(jButton_Tra)
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_TraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_TraActionPerformed
        if(!ma.equals("") && !maPM.equals("")){
            int SLT = 0;
            int SLH = 0;
            int TONGSL = 0;
            int TONGSLSD = 0;
            int TONGSLH = 0;
            int SLSD = 0;
            if(!jTextField_SLT.getText().equals("") && !jTextField_SLHONG.getText().equals("")){
                SLT = Integer.valueOf(jTextField_SLT.getText());
                SLH = Integer.valueOf(jTextField_SLHONG.getText());
                TONGSL = laySLDC(ma);
                TONGSLSD = laySLDCSD(ma);
                TONGSLH = laySLDCH(ma);
                SLSD = SLT - SLH;
            }
            int KTSLT = 0, KTSLH = 0;
            if(jTextField_SLT.getText().equals("")){
                KTSLT = 1;
                JOptionPane.showMessageDialog(this, "Số Lượng Trả Trống");
            }
            else if(jTextField_SLHONG.getText().equals("")){
                KTSLH = 1;
                JOptionPane.showMessageDialog(this, "Số Lượng Hỏng Trống");
            }
            else if(SLT > SLMuon){
                KTSLT = 1;
                JOptionPane.showMessageDialog(this, "Số Lượng Trả Lớn Hơn Số Lượng Mượn");
            }
            else if(SLH > SLT){
                KTSLH = 1;
                JOptionPane.showMessageDialog(this, "Số Lượng Hỏng Lớn Hơn Số Lượng Trả");
            }
            else if(KTSLT != 1 && KTSLH != 1){
                traDC(ma, TONGSL + SLSD, TONGSLSD - SLT, TONGSLH + SLH);
                giamSLPhieuMuon(maPM, ma, SLMuon - SLT);
                if(laySLPM(maPM, ma) == 0){
                    xoaPhieuMuon(maPM, ma);
                }
                JOptionPane.showMessageDialog(this, "Trả Dụng Cụ Thành Công");
                Load_DungCu();
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "Chưa Chọn Dụng Cụ Trả");
        }

    }//GEN-LAST:event_jButton_TraActionPerformed
    private void traDC(String maDC, int SL1, int SL2, int SL3){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "UPDATE TINHTRANGDUNGCU SET SLDCT = ?, SLDCSD = ?, SLDCH = ? WHERE MADUNGCU = ?";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ps.setInt(1, SL1);
            ps.setInt(2, SL2);
            ps.setInt(3, SL3);
            ps.setString(4, maDC);
            ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(ThongTinMuonDungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void giamSLPhieuMuon(String maPM, String maDC, int SL){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "UPDATE PHIEUMUON SET SLMUON = ? WHERE MAPHIEUMUON = ? AND MADUNGCU = ?";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ps.setInt(1, SL);
            ps.setString(2, maPM);
            ps.setString(3, maDC);
            ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(ThongTinMuonDungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void xoaPhieuMuon(String maPM, String maDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        String sql = "DELETE FROM PHIEUMUON WHERE MAPHIEUMUON = ? AND MADUNGCU = ?";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ps.setString(1, maPM);
            ps.setString(2, maDC);
            ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(ThongTinMuonDungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private int laySLDC(String maDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        int SL = 0;
        String sql = "select SLDCT from TINHTRANGDUNGCU where MADUNGCU = '" + maDC + "'";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                SL = rs.getInt("SLDCT");
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(ThongTinMuonDungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return SL;
    }
    private int laySLDCH(String maDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        int SL = 0;
        String sql = "select SLDCH from TINHTRANGDUNGCU where MADUNGCU = '" + maDC + "'";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                SL = rs.getInt("SLDCH");
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(ThongTinMuonDungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return SL;
    }
    private int laySLDCSD(String maDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        int SL = 0;
        String sql = "select SLDCSD from TINHTRANGDUNGCU where MADUNGCU = '" + maDC + "'";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                SL = rs.getInt("SLDCSD");
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(ThongTinMuonDungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return SL;
    }
    private int laySLPM(String maPM, String maDC){
        Connection ketNoi = KetNoiSQL.layKetNoi();
        int SL = 0;
        String sql = "select SLMUON from PHIEUMUON where MAPHIEUMUON = '" + maPM + "' AND MADUNGCU = '" + maDC + "'";
        try{
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                SL = rs.getInt("SLMUON");
            }
            ketNoi.close();
        }
        catch(SQLException ex){
            Logger.getLogger(ThongTinMuonDungCu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return SL;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Tra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_Muon;
    private javax.swing.JTextField jTextField_SLHONG;
    private javax.swing.JTextField jTextField_SLT;
    // End of variables declaration//GEN-END:variables
}
